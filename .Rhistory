length(sky_fibre_data$MagnetX / 1000.0)
length(sky_fibre_filler_list)
cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID)
cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list)
cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list)
cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
sky_fibre_data
target_table = cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng,selected_objects)
#* Get the IDs of things which have been tiled, and save these
#* IDs=IDs[rownames(pos),] <<- This is wrong!
IDs=IDs[match(rownames(pos),rownames(fdata)),]
# This gets the rest of the columns from the tile too for us to save
subset_of_IDs_for_saving = (tile_data$ID %in% IDs)
#selected_objects = tile_data[tile_data$ID %in% IDs,]
selected_objects = tile_data[subset_of_IDs_for_saving,]
# Now make the skyfibre rows
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs),]
sky_fibre_filler_list = rep(NA, nrow(sky_fibre_data))
target_table = cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng,selected_objects)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
selected_objects
length(selected_objects)
nrow(selected_objects)
nrow(sky_fibre_data)
length(sky_fibre_filler_list)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list)
sky_fibre_table
nrow(sky_fibre_table)
length(sky_fibre_table)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
final_table = rbind(target_table, sky_fibre_table)
target_table
sky_fibre_table
ncol(sky_fibre_table)
ncol(target_table)
# Now make the tables
target_table = cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng,selected_objects)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
final_table = rbind(target_table, sky_fibre_table)
final_table
View(final_table)
tile_data
as.numeric(rownames(tile_data))
rownames(tile_data)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
final_table
galaxy_out_name
write.table(final_table,file=galaxy_out_name, row.names=TRUE)
write.table(final_table,file=galaxy_out_name, row.names=TRUE)
galaxy_out_name
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
!subl /Users/samvaughan/Desktop/HECTORConfig_Hexa_GAMA_G12_DC_tile_000.txt
tile_data['fraction_plate_radius_X']
max(tile_data['fraction_plate_radius_X'])
min(tile_data['fraction_plate_radius_X'])
min(tile_data['fraction_plate_radius_Y'])
max(tile_data['fraction_plate_radius_Y'])
tile_data['MagnetX']
fov
tile_data['MagnetX']/1000
tile_data[, 'fraction_plate_radius_X'] = tile_data['MagnetX']/1000/(fov/2)
max(tile_data['fraction_plate_radius_Y'])
(fov/2)
tile_data['MagnetX']/1000/(fov/2)
# Add in the fraction of the plate radius for debugging
tile_data[, 'fraction_plate_radius_X'] = tile_data['MagnetX']/1000/(fov/2)
tile_data[, 'fraction_plate_radius_Y'] = tile_data['MagnetY']/1000/(fov/2)
max(tile_data[, 'fraction_plate_radius_Y'])
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
final_table
final_table[, 'fraction_plate_radius_X']
max(final_table[, 'fraction_plate_radius_X'])
min(final_table[, 'fraction_plate_radius_X'])
max(final_table[, 'fraction_plate_radius_Y'])
min(final_table[, 'fraction_plate_radius_Y'])
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
tile_data
fdata[,'x']
fdata[,'y']
fdata
IDs
pos
tile_data
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
pos
final_config
gangs
gdata
IDs
fdata[,c('ID')]
IDs[-1]
IDs
IDs[1]
IDs[30]
IDs[40]
IDs[19]
IDs[20]
IDs[21]
fdata$ID
fdata$ID[-1]
fdata$ID[10]
fdata$ID[46]
IDs=as.data.frame(fdata$ID)
IDs
final_config
IDs$guidenum
IDs[guidenum]
final_config$guidenum
gdata
guidepos
guidenum
pos$guidenum
pos
final_config$guidenum
gpos
gdata[1]
gdata[, 1]
gdata
gdata[1, ]
gdata[final_config$guidenum, ]
gpos
gdata
tile_data
fdata
gpos
as.numeric(rownames(gpos)
)
fdata[as.numeric(rownames(gpos))]
fdata[as.numeric(rownames(gpos)),]
fdata[37,]
length(fdata)
fdata
View(fdata)
fdata[50,]
nrow(fdata)
row.names(fdata)
fdata['
']
as.numeric(rownames(gpos))
fdata['37']
fdata['37',]
rownames(gpos)
fdata[rownames(gpos),]
gdata
guide_IDs
fdata[rownames(gpos), 'ID']
guide_IDs = fdata[rownames(gpos), 'ID']
gdata$ID %in% guide_IDs
gdata[gdata$ID %in% guide_IDs]
gdata[gdata$ID %in% guide_IDs, ]
final_guide_table = rbind(all_guide_data,gpos,grads,gangs,gazAngs,gangs_gazAng)
all_guide_data = gdata[gdata$ID %in% guide_IDs, ]
final_guide_table = rbind(all_guide_data,gpos,grads,gangs,gazAngs,gangs_gazAng)
gpos
rbind(all_guide_data,gpos)
cbind(all_guide_data,gpos)
final_guide_table = cbind(all_guide_data,gpos,grads,gangs,gazAngs,gangs_gazAng)
final_guide_table
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
write.table(final_table,file=galaxy_out_name, row.names=FALSE)
write.table(final_guide_table, file=guide_out_name, row.names=FALSE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
all_guide_data
gpos
guide_IDs
rownames(gpos)
fdata
gdata
guide_filename
tile_filename
gdata
nrows(gdata)
nrow(gdata)
final_config
pos
final_config
guide_IDs = fdata[guidenum, 'ID']
chosen_guides = final_config$guidenum
chosen_guides
gdata
gdata[chosen_guides,]
gdata[chosen_guides, 'ID']
all_guide_data = gdata[gdata$ID %in% guide_IDs, ]
all_guide_data
guide_IDs
gdata
chosen_guides
guide_IDs = gdata[chosen_guides, 'ID']
guide_IDs
gdata$ID %in% guide_IDs
all_guide_data = gdata[gdata$ID %in% guide_IDs, ]
all_guide_data
chosen_guides
guide_IDs
all_guide_data[,"ID"]
final_guide_table = cbind(all_guide_data,gpos,grads,gangs,gazAngs,gangs_gazAng)
final_guide_table
setwd("~/Science/Hector/Targets/HectorInputCatalogues/Commissioning/StarFields")
library(FITSio)
library(profound)
library(ProFound)
image = readFITS("test.fits")
profound=profoundProFound(image, magzero=24.76, plot=TRUE, verbose = TRUE)
plot(profound)
profound$segim
profound$segstats
write.csv?
q
write.csv(profound$segstats, file='catalogue.csv')
ls
writeFITSim(profound$mask, file='mask.fits')
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
target_table
ID=IDs[match(rownames(pos),rownames(fdata)),]
IDs=as.data.frame(fdata$ID)
ID=IDs[match(rownames(pos),rownames(fdata)),]
target_table = cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng,selected_objects)
length((IDs))
nrows(IDs)
target_table = cbind(probe=c(1:length(angs)),ID,pos,rads,angs,azAngs,angs_azAng,selected_objects)
target_table
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
ID=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
final_table = rbind(target_table, sky_fibre_table)
ncol(target_table)
ncol(sky_fibre_data)
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs),]
sky_fibre_data
#* Get the IDs of things which have been tiled, and save these
#* IDs=IDs[rownames(pos),] <<- This is wrong!
ID=IDs[match(rownames(pos),rownames(fdata)),]
# This gets the rest of the columns from the tile too for us to save
subset_of_IDs_for_saving = (tile_data$ID %in% IDs)
# Don't keep the ID column as otherwise this gets duplicated
selected_objects = tile_data[subset_of_IDs_for_saving, -which(names(tile_data) == "ID")]
# Now make the skyfibre rows
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs),]
sky_fibre_filler_list = rep(NA, nrow(sky_fibre_data))
# Now make the tables- one for the hexabundles ("target_table") and one for the sky fibres
# I've added NA values for the sky fibre columns which don't make sense (rads, angs, etc)
target_table = cbind(probe=c(1:length(angs)),ID,pos,rads,angs,azAngs,angs_azAng,selected_objects)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
ID=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
final_table = rbind(target_table, sky_fibre_table)
selected_objects
sky_fibre_IDs
tile_data
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs),]
sky_fibre_data
ncol(sky_fibre_data)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
ID=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
sky_fibre_table
ncol(sky_fibre_table)
#* Get the IDs of things which have been tiled, and save these
#* IDs=IDs[rownames(pos),] <<- This is wrong!
ID=IDs[match(rownames(pos),rownames(fdata)),]
# This gets the rest of the columns from the tile too for us to save
subset_of_IDs_for_saving = (tile_data$ID %in% IDs)
# Don't keep the ID column as otherwise this gets duplicated
selected_objects = tile_data[subset_of_IDs_for_saving, -which(names(tile_data) == "ID")]
# Now make the skyfibre rows
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs), -which(names(tile_data) == "ID")]
sky_fibre_filler_list = rep(NA, nrow(sky_fibre_data))
# Now make the tables- one for the hexabundles ("target_table") and one for the sky fibres
# I've added NA values for the sky fibre columns which don't make sense (rads, angs, etc)
target_table = cbind(probe=c(1:length(angs)),ID,pos,rads,angs,azAngs,angs_azAng,selected_objects)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
ID=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
final_table = rbind(target_table, sky_fibre_table)
ncol(target_table)
ncol(sky_fibre_table)
ncol(sky_fibre_data)
-which(names(tile_data) == "ID")
tile_data[subset_of_IDs_for_saving, -which(names(tile_data) == "ID")]
subset_of_IDs_for_saving = (tile_data$ID %in% IDs)
subset_of_IDs_for_saving
#* Get the IDs of things which have been tiled, and save these
#* IDs=IDs[rownames(pos),] <<- This is wrong!
ID=IDs[match(rownames(pos),rownames(fdata)),]
# This gets the rest of the columns from the tile too for us to save
subset_of_IDs_for_saving = (tile_data$ID %in% ID)
# Don't keep the ID column as otherwise this gets duplicated
selected_objects = tile_data[subset_of_IDs_for_saving, -which(names(tile_data) == "ID")]
selected_objects
ncol(selected_objects)
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs), -which(names(tile_data) == "ID")]
ncol(sky_fibre_data)
#* Get the IDs of things which have been tiled, and save these
#* IDs=IDs[rownames(pos),] <<- This is wrong!
ID=IDs[match(rownames(pos),rownames(fdata)),]
# This gets the rest of the columns from the tile too for us to save
subset_of_IDs_for_saving = (tile_data$ID %in% ID)
# Don't keep the ID column as otherwise this gets duplicated
selected_objects = tile_data[subset_of_IDs_for_saving, -which(names(tile_data) == "ID")]
# Now make the skyfibre rows
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs), -which(names(tile_data) == "ID")]
sky_fibre_filler_list = rep(NA, nrow(sky_fibre_data))
# Now make the tables- one for the hexabundles ("target_table") and one for the sky fibres
# I've added NA values for the sky fibre columns which don't make sense (rads, angs, etc)
target_table = cbind(probe=c(1:length(angs)),ID,pos,rads,angs,azAngs,angs_azAng,selected_objects)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
ID=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
final_table = rbind(target_table, sky_fibre_table)
target_table
ncol(target_table)
ncol(sky_fibre_table)
sky_fibre_table
names(sky_fibre_table)
names(target_table)
tile_data[(tile_data$ID %in% sky_fibre_IDs), -which(names(tile_data) == "ID")]
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs), -which(names(tile_data) == "ID")]
names(sky_fibre_data)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
ID=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
sky_fibre_filler_list
sky_fibre_data$ID
sky_fibre_data
#* Get the IDs of things which have been tiled, and save these
#* IDs=IDs[rownames(pos),] <<- This is wrong!
ID=IDs[match(rownames(pos),rownames(fdata)),]
# This gets the rest of the columns from the tile too for us to save
subset_of_IDs_for_saving = (tile_data$ID %in% ID)
# Don't keep the ID column as otherwise this gets duplicated
selected_objects = tile_data[subset_of_IDs_for_saving, -which(names(tile_data) == "ID")]
# Now make the skyfibre rows
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs),]
sky_fibre_IDs = sky_fibre_data$ID
sky_fibre_data_minus_IDs =  sky_fibre_data[, -which(names(sky_fibre_data) == "ID")]
sky_fibre_filler_list = rep(NA, nrow(sky_fibre_data))
# Now make the tables- one for the hexabundles ("target_table") and one for the sky fibres
# I've added NA values for the sky fibre columns which don't make sense (rads, angs, etc)
target_table = cbind(probe=c(1:length(angs)),ID,pos,rads,angs,azAngs,angs_azAng,selected_objects)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
ID=sky_fibre_IDs,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
final_table = rbind(target_table, sky_fibre_table)
sky_fibre_IDs
sky_fibre_data_minus_IDs
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
ID=sky_fibre_IDs,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
names(sky_fibre_table)
#* Get the IDs of things which have been tiled, and save these
#* IDs=IDs[rownames(pos),] <<- This is wrong!
ID=IDs[match(rownames(pos),rownames(fdata)),]
# This gets the rest of the columns from the tile too for us to save
subset_of_IDs_for_saving = (tile_data$ID %in% ID)
# Don't keep the ID column as otherwise this gets duplicated
selected_objects = tile_data[subset_of_IDs_for_saving, -which(names(tile_data) == "ID")]
# Now make the skyfibre rows
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs),]
sky_fibre_IDs = sky_fibre_data$ID
sky_fibre_data_minus_IDs =  sky_fibre_data[, -which(names(sky_fibre_data) == "ID")]
sky_fibre_filler_list = rep(NA, nrow(sky_fibre_data))
# Now make the tables- one for the hexabundles ("target_table") and one for the sky fibres
# I've added NA values for the sky fibre columns which don't make sense (rads, angs, etc)
target_table = cbind(probe=c(1:length(angs)),ID,pos,rads,angs,azAngs,angs_azAng,selected_objects)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
ID=sky_fibre_IDs,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data_minus_IDs)
final_table = rbind(target_table, sky_fibre_table)
final_table
names(final_table)
print(paste('********************************************'))
print(paste('Writing outputs to ', galaxy_out_name, sep=''))
print(paste('********************************************'))
#* Write the final table for the hexabundles and the guides
write.table(final_table,file=galaxy_out_name, row.names=FALSE, sep=',')
write.table(final_guide_table, file=guide_out_name, row.names=FALSE, sep=',')
if (visualise) {
plot_configured_field(pos=pos,angs=angs,gpos=gpos,gangs=gangs, fieldflags=final_config$flags, aspdf=FALSE)
}
#* plot_filename = filename=paste(out_dir,'/HECTORConfig_',addition_to_fname, substr(f, start=1,stop=nchar(f)-4), '.pdf', sep='')
plot_configured_field(filename=plot_filename,pos=pos,angs=angs,gpos=gpos,gangs=gangs, fieldflags=final_config$flags, aspdf=TRUE)
#i=i+1
final_table = rbind(target_table, sky_fibre_table)
#* Get the IDs of guide stars which have been chosen:
guide_IDs = gdata[chosen_guides, 'ID']
#* And get the columns from the input file
all_guide_data = gdata[gdata$ID %in% guide_IDs, ]
#* And now add on the other rows that we need
final_guide_table = cbind(all_guide_data,gpos,grads,gangs,gazAngs,gangs_gazAng)
#Writing output files:
#* I've added the ability to save things to a specified output directory
#* This is passed via argparse as 'out_dir'
#write.table(cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng),file=paste(out_dir,'HECTORConfig_Hexa_',addition_to_fname, substr(f, start=1,stop=nchar(f)-4), '.txt', sep=''), row.names=FALSE)
#write.table(cbind(probe=c(1:length(gangs)),gpos,gangs),file=paste(out_dir,'HECTORConfig_Guides_',addition_to_fname, substr(f, start=1,stop=nchar(f)-4), '.txt', sep=''), row.names=FALSE)
# galaxy_out_name = paste(out_dir,'HECTORConfig_Hexa_',addition_to_fname, substr(f, start=1,stop=nchar(f)-4), '.txt', sep='')
# guide_out_name = paste(out_dir,'HECTORConfig_Guides_',addition_to_fname, substr(f, start=1,stop=nchar(f)-4), '.txt', sep='')
print(paste('********************************************'))
print(paste('Writing outputs to ', galaxy_out_name, sep=''))
print(paste('********************************************'))
#* Write the final table for the hexabundles and the guides
write.table(final_table,file=galaxy_out_name, row.names=FALSE, sep=',')
write.table(final_guide_table, file=guide_out_name, row.names=FALSE, sep=',')
if (visualise) {
plot_configured_field(pos=pos,angs=angs,gpos=gpos,gangs=gangs, fieldflags=final_config$flags, aspdf=FALSE)
}
#* plot_filename = filename=paste(out_dir,'/HECTORConfig_',addition_to_fname, substr(f, start=1,stop=nchar(f)-4), '.pdf', sep='')
plot_configured_field(filename=plot_filename,pos=pos,angs=angs,gpos=gpos,gangs=gangs, fieldflags=final_config$flags, aspdf=TRUE)
#i=i+1
#TestOutcome=cbind(itnconflicts,swapsneeded)
#* Don't save the R image
#* save.image('HECTOR_Config_v1.0_ClusterFieldsTest_width24.img')
profound
savehistory("~/Desktop/tmp.Rhistory")
