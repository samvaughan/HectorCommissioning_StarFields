
# The final output 
rule all:
    input:
        completed_flag_file = f"{config['output_folder']}/completed_tiling.done",
        email_sent_file = f"{config['output_folder']}/email_sent.done"


# See whether we want to download the individual image files
if config['download_files']:
    indices = [f'{n:03}' for n in range(100)]
    rule download_images:
        output: 
            image_list = expand(["results/Individual_images/{field}/rings.v3.skycell.{skycell}.{index}.stk.r.unconv.fits"], index=indices, skycell=config['skycell'], field=config['FIELD'])
        conda:
            "envs/scientific_python.yaml"
        shell:
            f"workflow/scripts/download_mosaics.sh {config['skycell']} results/Individual_images/{config['FIELD']}"
            

    # Make the mosaic using our input files as a list
    rule make_mosaic:
        input:
            images = rules.download_images.output.image_list
        output:
            output_image = config['final_image_filename']
        conda:
            "envs/scientific_python.yaml"
        script:
            "scripts/make_mosaic.py"

else:
    # Make the mosaic using our input files as a glob command
    rule make_mosaic:
        input:
            image_glob = config['individual_image_glob']
        output:
            output_image = config['final_image_filename']
        conda:
            "envs/scientific_python.yaml"
        script:
            "scripts/make_mosaic.py"

# Run profound on this mosaic
rule run_profound_on_mosaic:
    input:
        #config_filename = expand("config/Field_{field}_m20.yaml", field=config['FIELD']),
        input_image = rules.make_mosaic.output.output_image
    output:
        profound_mask = config['profound_mask_name'],
        profound_catalogue = config['profound_catalogue_name']
    conda:
        "envs/scientific_python.yaml"
    script:
        "scripts/run_profound_mosaic.py"



# Select stars for our fields
rule select_stars:
    # input:
    #     config_filename = expand("config/Field_{field}_m20.yaml", field=config['FIELD'])
    output:
        targets_file = config['target_output_name'],
        standards_file = config['standard_star_filename'],
        guides_file = config['guide_star_filename']
    conda:
        "envs/scientific_python.yaml"
    script:
        "scripts/select_star_fields.py"


if config['starfield_type'] == 'equally_spaced':

    rule mask_targets_catalogue:
        input:
            targets_file = rules.select_stars.output.targets_file,
            IDs_for_masking = config['chosen_IDs']
        output:
            final_catalogue_name = config['final_catalogue_name']
        script:
            'scripts/mask_star_catalogue.py'

else:
    rule mask_targets_catalogue:
        input:
            targets_file = rules.select_stars.output.targets_file
        output:
            final_catalogue_name = config['final_catalogue_name']
        script:
            'scripts/mask_star_catalogue.py'

# Run the tiling code
if config['starfield_type'] == 'equally_spaced':
    rule run_tiling_equally_spaced:
        input: 
            config_filename = config['filename'],
            targets_file = rules.mask_targets_catalogue.output.final_catalogue_name,
            standards_file = rules.select_stars.output.standards_file,
            guides_file = rules.select_stars.output.guides_file,
            profound_skymask = rules.run_profound_on_mosaic.output.profound_mask
        output:
            completed_flag_file = rules.all.input.completed_flag_file
        script:
            "scripts/run_tiling_equally_spaced.py"

elif config['starfield_type'] == 'within_half_radius':
    rule run_tiling_within_half_radius:
        input: 
            config_filename = config['filename'],
            targets_file = rules.mask_targets_catalogue.output.final_catalogue_name,
            standards_file = rules.select_stars.output.standards_file,
            guides_file = rules.select_stars.output.guides_file,
            profound_skymask = rules.run_profound_on_mosaic.output.profound_mask
        output:
            completed_flag_file = rules.all.input.completed_flag_file
        script:
            "scripts/run_tiling.py"

elif config['starfield_type'] == 'entire_catalogue':
    rule run_tiling_entire_catalogue:
        input: 
            config_filename = config['filename'],
            targets_file = rules.mask_targets_catalogue.output.final_catalogue_name,
            standards_file = rules.select_stars.output.standards_file,
            guides_file = rules.select_stars.output.guides_file,
            profound_skymask = rules.run_profound_on_mosaic.output.profound_mask
        output:
            completed_flag_file = rules.all.input.completed_flag_file
        script:
            "scripts/run_tiling.py"
else:
    rule raise_name_error:
        run:
            raise NameError("Not sure which tiling program to run! Check 'starfield_type' in the config file")


# Send myself an empty message when the pipeline is done
rule inform_finished:
    input: 
        rules.all.input.completed_flag_file
    output:
        rules.all.input.email_sent_file
    run:
        shell(f"mail -s 'Pipeline {config['output_folder']} Finished' samvaughan01@gmail.com < /dev/null")
        shell("touch {output}")